require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const flash = require('connect-flash');
const path = require('path');
const cloudinary = require('cloudinary').v2; // Pastikan import v2 jika itu yang Anda gunakan

const app = express();
const PORT = process.env.PORT || 3000;

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('MongoDB Terhubung'))
  .catch(err => console.error('Kesalahan Koneksi MongoDB:', err));

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads'))); // Untuk serve file lokal jika ada

app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: process.env.MONGODB_URI,
    collectionName: 'sesi_aplikasi_kode'
  }),
  cookie: {
    maxAge: 1000 * 60 * 60 * 24 * 7, // 7 hari
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
  }
}));

app.use(flash());

app.use((req, res, next) => {
  res.locals.currentUser = req.session.user;
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.errors = req.flash('errors'); // Untuk error validasi
  res.locals.query = req.query;
  res.locals.currentPath = req.path;
  res.locals.process = process; // Agar process.env bisa diakses di EJS
  next();
});

const indexRoutes = require('./routes/index');
const authRoutes = require('./routes/auth');
const codeRoutes = require('./routes/code');

app.use('/', indexRoutes);
app.use('/auth', authRoutes);
app.use('/code', codeRoutes);

app.use((req, res, next) => {
  res.status(404).render('404', { title: '404 - Halaman Tidak Ditemukan' });
});

app.use((err, req, res, next) => {
  console.error("Global Error Handler:", err);
  req.flash('error_msg', 'Terjadi kesalahan internal pada server. Silakan coba lagi nanti.');
  if (res.headersSent) {
    return next(err);
  }
  // Cek apakah request GET atau POST untuk menghindari redirect loop pada POST
  if (req.method === 'GET' && !req.xhr) { // Jangan redirect jika AJAX
    res.redirect('back');
  } else {
     // Untuk AJAX atau POST, kirim respons JSON atau render halaman error
    res.status(500).render('500', { // Buat views/500.ejs
        title: 'Kesalahan Server',
        error: process.env.NODE_ENV === 'development' ? err : {}
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server berjalan di http://localhost:${PORT}`);
});