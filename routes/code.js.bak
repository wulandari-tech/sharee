const express = require('express');
const router = express.Router();
const multer = require('multer');
const cloudinary = require('cloudinary').v2;
const path = require('path');
const fs = require('fs').promises; // Gunakan versi promise dari fs
const axios = require('axios');
const Code = require('../models/Code');
const { ensureAuthenticated } = require('./auth');

const uploadDir = path.join(__dirname, '../uploads');

// Pastikan direktori uploads ada
const ensureUploadDirExists = async () => {
    try {
        await fs.access(uploadDir);
    } catch (error) {
        await fs.mkdir(uploadDir, { recursive: true });
    }
};
ensureUploadDirExists();


const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname.replace(/\s+/g, '_')}`);
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 15 * 1024 * 1024 },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /zip|text|javascript|html|css|python|java|c|cpp|json|xml|jpeg|jpg|png|gif|md|php|sql|ruby|go|rust|svg|webp|ico|pdf|doc|docx|xls|xlsx|ppt|pptx/;
    const mimetype = allowedTypes.test(file.mimetype);
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    if (mimetype || extname) { // Izinkan jika mimetype ATAU ekstensi cocok
      return cb(null, true);
    }
    cb(new Error('Tipe file tidak diizinkan.'));
  }
}).single('file'); // Definisikan .single('file') di sini

function processTagsInput(tagsString) {
  if (!tagsString || typeof tagsString !== 'string') return [];
  return tagsString.split(',')
    .map(tag => tag.trim().toLowerCase().replace(/\s+/g, '-'))
    .filter(tag => tag.length > 0 && tag.length <= 25)
    .filter((value, index, self) => self.indexOf(value) === index)
    .slice(0, 10);
}

// Middleware untuk menangani upload file dan validasi dasar
const handleFileUploadValidation = (req, res, next) => {
    upload(req, res, (err) => {
        if (err instanceof multer.MulterError) {
            if (err.code === 'LIMIT_FILE_SIZE') {
                req.flash('error_msg', 'Ukuran file terlalu besar (maks 15MB).');
            } else {
                req.flash('error_msg', `Multer error: ${err.message}`);
            }
            return res.redirect('back');
        } else if (err) { // Error dari fileFilter atau lainnya
            req.flash('error_msg', err.message || 'Gagal mengunggah file.');
            return res.redirect('back');
        }
        next();
    });
};


router.get('/upload', ensureAuthenticated, (req, res) => {
  res.render('upload', { title: 'Unggah Kode/File Baru', code: null });
});

router.post('/upload', ensureAuthenticated, handleFileUploadValidation, async (req, res, next) => {
  const { title, description, programmingLanguage, content, tags } = req.body;
  const recaptchaResponse = req.body['g-recaptcha-response'];
  let validationErrors = [];

  if (!title) {
    validationErrors.push({ msg: 'Judul wajib diisi.' });
  }
  if (!content && !req.file && (!programmingLanguage || programmingLanguage !== 'file')) {
     validationErrors.push({ msg: 'Konten kode atau file wajib diisi salah satu.' });
  }
  if (!recaptchaResponse) {
    validationErrors.push({ msg: 'Harap verifikasi reCAPTCHA.' });
  }

  if (validationErrors.length > 0) {
    if (req.file) await fs.unlink(req.file.path).catch(console.error);
    req.flash('errors', validationErrors);
    return res.render('upload', { title: 'Unggah Kode/File Baru', code: req.body });
  }

  try {
    const recaptchaVerifyUrl = `https://www.google.com/recaptcha/api/siteverify?secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${recaptchaResponse}&remoteip=${req.ip}`;
    const recaptchaResult = await axios.post(recaptchaVerifyUrl);
    if (!recaptchaResult.data.success) {
      if (req.file) await fs.unlink(req.file.path).catch(console.error);
      req.flash('error_msg', 'Verifikasi reCAPTCHA gagal.');
      return res.render('upload', { title: 'Unggah Kode/File Baru', code: req.body });
    }

    const newCodeData = {
      title,
      description,
      programmingLanguage: (req.file && !content) ? 'file' : (programmingLanguage || 'plaintext'),
      content: content || '',
      tags: processTagsInput(tags),
      author: req.session.user._id,
    };

    if (req.file) {
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: "code_share_uploads",
        resource_type: "auto",
        use_filename: true, // Gunakan nama file asli untuk public_id jika memungkinkan
        unique_filename: false // Jika use_filename true, ini bisa false, atau true untuk jaminan unik
      });
      newCodeData.fileurl = result.secure_url;
      newCodeData.filename = req.file.originalname;
      newCodeData.mimetype = req.file.mimetype;
      await fs.unlink(req.file.path);
    }

    const code = new Code(newCodeData);
    await code.save();
    req.flash('success_msg', 'Kode/File berhasil diunggah!');
    res.redirect(`/code/view/${code._id}`);

  } catch (error) {
    if (req.file && req.file.path) await fs.unlink(req.file.path).catch(console.error);
    next(error);
  }
});

router.get('/edit/:id', ensureAuthenticated, async (req, res, next) => {
  try {
    const code = await Code.findById(req.params.id).lean();
    if (!code) {
      req.flash('error_msg', 'Snippet tidak ditemukan.');
      return res.redirect('/code/my-snippets');
    }
    if (code.author.toString() !== req.session.user._id.toString()) {
      req.flash('error_msg', 'Anda tidak berhak mengedit snippet ini.');
      return res.redirect(`/code/view/${req.params.id}`);
    }
    res.render('upload', { title: 'Edit Kode/File', code });
  } catch (error) {
    next(error);
  }
});

router.post('/edit/:id', ensureAuthenticated, handleFileUploadValidation, async (req, res, next) => {
  const { title, description, programmingLanguage, content, tags, remove_file } = req.body;
  let validationErrors = [];

  if (!title) {
    validationErrors.push({ msg: 'Judul wajib diisi.' });
  }
   if (!content && !req.file && !remove_file && (!programmingLanguage || programmingLanguage !== 'file')) {
     // Kondisi ini rumit: jika tidak ada content baru, tidak ada file baru, tidak hapus file lama,
     // dan language bukan file, maka perlu cek apakah ada file lama.
     // Validasi ini mungkin lebih baik ditangani setelah mengambil data code.
  }

  if (validationErrors.length > 0) {
    if (req.file) await fs.unlink(req.file.path).catch(console.error);
    req.flash('errors', validationErrors);
    const currentCode = await Code.findById(req.params.id).lean(); // Ambil data terbaru untuk render form
    return res.render('upload', { title: 'Edit Kode/File', code: { ...currentCode, ...req.body } });
  }

  try {
    const code = await Code.findById(req.params.id);
    if (!code) {
      if (req.file) await fs.unlink(req.file.path).catch(console.error);
      req.flash('error_msg', 'Snippet tidak ditemukan.');
      return res.redirect('/code/my-snippets');
    }
    if (code.author.toString() !== req.session.user._id.toString()) {
      if (req.file) await fs.unlink(req.file.path).catch(console.error);
      req.flash('error_msg', 'Anda tidak berhak mengedit snippet ini.');
      return res.redirect(`/code/view/${req.params.id}`);
    }

    code.title = title;
    code.description = description;
    code.programmingLanguage = (req.file && !content && !code.content) ? 'file' : (programmingLanguage || code.programmingLanguage || 'plaintext');
    code.content = content !== undefined ? content : code.content;
    code.tags = processTagsInput(tags);

    if (remove_file === 'true' && code.fileurl) {
      if (code.fileurl.includes('cloudinary.com')) {
        const publicIdMatch = code.fileurl.match(/upload\/(?:v\d+\/)?([^\.]+)/);
        if (publicIdMatch && publicIdMatch[1]) {
            await cloudinary.uploader.destroy(publicIdMatch[1], { resource_type: "auto" });
        }
      }
      code.fileurl = null;
      code.filename = null;
      code.mimetype = null;
      if(!code.content) code.programmingLanguage = 'plaintext';
    }

    if (req.file) {
      if (code.fileurl && code.fileurl.includes('cloudinary.com')) {
        const publicIdMatch = code.fileurl.match(/upload\/(?:v\d+\/)?([^\.]+)/);
        if (publicIdMatch && publicIdMatch[1]) {
           await cloudinary.uploader.destroy(publicIdMatch[1], { resource_type: "auto" });
        }
      }
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: "code_share_uploads",
        resource_type: "auto",
        use_filename: true,
        unique_filename: false
      });
      code.fileurl = result.secure_url;
      code.filename = req.file.originalname;
      code.mimetype = req.file.mimetype;
      await fs.unlink(req.file.path);
      if(!code.content) code.programmingLanguage = 'file';
    }

    await code.save();
    req.flash('success_msg', 'Perubahan berhasil disimpan!');
    res.redirect(`/code/view/${code._id}`);

  } catch (error) {
    if (req.file && req.file.path) await fs.unlink(req.file.path).catch(console.error);
    next(error);
  }
});

router.get('/view/:id', async (req, res, next) => {
  try {
    const code = await Code.findById(req.params.id)
      .populate('author', 'username')
      .populate('comments.author', 'username');

    if (!code) {
      req.flash('error_msg', 'Snippet tidak ditemukan.');
      return res.redirect('/');
    }

    code.viewCount = (code.viewCount || 0) + 1;
    await Code.updateOne({ _id: code._id }, { $inc: { viewCount: 1 } }); // Update tanpa memicu save hook jika tidak perlu
    
    const userHasLiked = req.session.user && code.likedBy.some(id => id.equals(req.session.user._id));

    res.render('view', {
      title: `${code.title} - SHARECODE`,
      code,
      comments: code.comments.sort((a, b) => b.createdAt - a.createdAt),
      userHasLiked
    });
  } catch (error) {
    next(error);
  }
});

router.post('/delete/:id', ensureAuthenticated, async (req, res, next) => {
    try {
        const code = await Code.findById(req.params.id);
        if (!code) {
            req.flash('error_msg', 'Snippet tidak ditemukan.');
            return res.redirect('/code/my-snippets');
        }
        if (code.author.toString() !== req.session.user._id.toString()) {
            req.flash('error_msg', 'Anda tidak berhak menghapus snippet ini.');
            return res.redirect(`/code/view/${req.params.id}`);
        }

        if (code.fileurl && code.fileurl.includes('cloudinary.com')) {
            const publicIdMatch = code.fileurl.match(/upload\/(?:v\d+\/)?([^\.]+)/);
            if (publicIdMatch && publicIdMatch[1]) {
                await cloudinary.uploader.destroy(publicIdMatch[1], { resource_type: "auto" });
            }
        }
        
        await Code.findByIdAndDelete(req.params.id);
        req.flash('success_msg', 'Snippet berhasil dihapus.');
        res.redirect('/code/my-snippets');
    } catch (error) {
        next(error);
    }
});

router.get('/my-snippets', ensureAuthenticated, async (req, res, next) => {
    const page = parseInt(req.query.page) || 1;
    const limit = 6;
    try {
        const codes = await Code.find({ author: req.session.user._id })
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit)
            .limit(limit)
            .populate('author', 'username') // Tambahkan populate jika perlu
            .lean();
        
        const totalCodes = await Code.countDocuments({ author: req.session.user._id });

        res.render('my_snippets', {
            title: 'Snippet Saya - SHARECODE',
            codes,
            currentPage: page,
            hasNextPage: limit * page < totalCodes,
            hasPreviousPage: page > 1,
            nextPage: page + 1,
            previousPage: page - 1,
            lastPage: Math.ceil(totalCodes / limit),
        });
    } catch (error) {
        next(error);
    }
});

router.post('/:id/comment', ensureAuthenticated, async (req, res, next) => {
    const { text } = req.body;
    if (!text || text.trim().length < 1 || text.trim().length > 1000) {
        req.flash('error_msg', 'Komentar harus antara 1 dan 1000 karakter.');
        return res.redirect(`/code/view/${req.params.id}#comments-section`);
    }
    try {
        const code = await Code.findById(req.params.id);
        if (!code) {
            req.flash('error_msg', 'Snippet tidak ditemukan.');
            return res.redirect('/');
        }
        const newComment = {
            text: text.trim(),
            author: req.session.user._id
        };
        code.comments.push(newComment);
        await code.save();
        req.flash('success_msg', 'Komentar berhasil ditambahkan.');
        res.redirect(`/code/view/${req.params.id}#comments-section`);
    } catch (error) {
        next(error);
    }
});

router.post('/:id/like', ensureAuthenticated, async (req, res, next) => {
    try {
        const code = await Code.findById(req.params.id);
        if (!code) {
            return res.status(404).json({ message: 'Snippet tidak ditemukan.' });
        }
        const userId = req.session.user._id;
        const userIndex = code.likedBy.findIndex(id => id.equals(userId));

        if (userIndex === -1) {
            code.likedBy.push(userId);
        } else {
            code.likedBy.splice(userIndex, 1);
        }
        code.likes = code.likedBy.length;
        await code.save();
        return res.json({ liked: userIndex === -1, likes: code.likes });
    } catch (error) {
        // console.error("Error like/unlike:", error);
        // res.status(500).json({ message: 'Gagal memproses permintaan like.' });
        next(error); // Biarkan global handler yg menangani
    }
});

router.get('/:id/download', async (req, res, next) => {
    try {
        const code = await Code.findById(req.params.id).lean();
        if (!code || !code.content || code.programmingLanguage === 'file') {
            req.flash('error_msg', 'Kode mentah tidak tersedia atau ini adalah postingan file.');
            return res.redirect(code ? `/code/view/${code._id}` : '/');
        }

        let extension = '.txt';
        const langMap = {
            'htmlmixed': '.html', 'javascript': '.js', 'css': '.css', 'python': '.py',
            'text/x-java': '.java', 'text/x-csrc': '.c', 'text/x-c++src': '.cpp',
            'php': '.php', 'ruby': '.rb', 'go': '.go', 'rust': '.rs', 'sql': '.sql', 'markdown': '.md'
        };
        extension = langMap[code.programmingLanguage] || extension;
        
        const filename = `${(code.title || 'snippet').replace(/[^\w\s.-]/gi, '').replace(/\s+/g, '_')}${extension}`;
        
        res.setHeader('Content-disposition', `attachment; filename="${filename}"`); // Kutip nama file
        res.setHeader('Content-type', 'text/plain; charset=utf-8');
        res.send(code.content);

    } catch (error) {
        next(error);
    }
});

module.exports = router;